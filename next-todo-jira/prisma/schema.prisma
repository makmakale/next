generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  username       String    @unique
  email          String    @unique
  emailVerified  DateTime?
  password       String?
  name           String
  image          String?
  isActive       Boolean   @default(true)
  isAdmin        Boolean   @default(false)
  accounts       Account[]
  assigneedTasks Task[]    @relation("AssignedTask")
  createdTasks   Task[]    @relation("CreatedTask")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Project {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  alias       String   @unique
  description String?
  order       Int
  isDefault   Boolean  @default(false)
  tasks       Task[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Status {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  alias       String   @unique
  description String?
  order       Int
  isDefault   Boolean  @default(false)
  addTask     Boolean  @default(false)
  bgColor     String
  textColor   String
  tasks       Task[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TaskPriority {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  alias       String?  @unique
  description String?
  color       String
  isDefault   Boolean  @default(false)
  order       Int
  tasks       Task[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TaskType {
  id              Int      @id @default(autoincrement())
  title           String   @unique
  alias           String?  @unique
  description     String?
  order           Int
  isDefault       Boolean  @default(false)
  subtasksAllowed Boolean  @default(false)
  color           String
  tasks           Task[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Task {
  id          Int           @id @default(autoincrement())
  title       String?
  description String?
  order       Int
  project     Project?      @relation(fields: [projectId], references: [id])
  projectId   Int?
  status      Status?       @relation(fields: [statusId], references: [id])
  statusId    Int?
  type        TaskType?     @relation(fields: [typeId], references: [id])
  typeId      Int?
  priority    TaskPriority? @relation(fields: [priorityId], references: [id])
  priorityId  Int?
  assignee    User?         @relation("AssignedTask", fields: [userId], references: [id])
  userId      Int?
  reporter    User          @relation("CreatedTask", fields: [createdBy], references: [id])
  createdBy   Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Account {
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
